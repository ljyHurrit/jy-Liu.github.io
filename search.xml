<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>人脸识别</title>
      <link href="/2023/02/17/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/"/>
      <url>/2023/02/17/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="基于opencv的人脸识别"><a href="#基于opencv的人脸识别" class="headerlink" title="基于opencv的人脸识别"></a>基于opencv的人脸识别</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2>1.将图片转为灰度图，降低计算难度<br>2.绘制矩形框<br>3.利用训练器来识别人脸<h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2>1.转化为灰度图，利用opencv库中的cvtColor（）函数  <pre><code>import cv2filepath = &quot;img/xingye-1.png&quot;img = cv2.imread(filepath)# 转换灰色gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)# 显示图像cv2.imshow(&quot;Image&quot;, gray)cv2.waitKey(0)cv2.destroyAllWindows() </code></pre>2.在图片上绘制矩形，利用rectangle（）函数  <pre><code>import cv2filepath = &quot;img/xingye-1.png&quot;img = cv2.imread(filepath)  # 读取图片gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # 转换灰色x = y = 10  # 坐标w = 100  # 矩形大小（宽、高）color = (0, 0, 255)  # 定义绘制颜色cv2.rectangle(img, (x, y), (x + w, y + w), color, 1)  # 绘制矩形cv2.imshow(&quot;Image&quot;, img)  # 显示图像cv2.waitKey(0)cv2.destroyAllWindows()  # 释放所有的窗体资源   </code></pre>3.利用训练好的分类器来查询人脸<br>这里采用的是opencv的人脸训练模型 链接<a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">opencv人脸模型训练</a>.<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><pre><code>import cv2filepath = &quot;img/xingye-1.png&quot;img = cv2.imread(filepath)  # 读取图片gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # 转换灰色# OpenCV人脸识别分类器classifier = cv2.CascadeClassifier(    &quot;C:\Python36\Lib\site-packages\opencv-master\data\haarcascades\haarcascade_frontalface_default.xml&quot;)color = (0, 255, 0)  # 定义绘制颜色# 调用识别人脸faceRects = classifier.detectMultiScale(    gray, scaleFactor=1.2, minNeighbors=3, minSize=(32, 32))if len(faceRects):  # 大于0则检测到人脸    for faceRect in faceRects:  # 单独框出每一张人脸        x, y, w, h = faceRect        # 框出人脸        cv2.rectangle(img, (x, y), (x + h, y + w), color, 2)        # 左眼        cv2.circle(img, (x + w // 4, y + h // 4 + 30), min(w // 8, h // 8),                color)        #右眼        cv2.circle(img, (x + 3 * w // 4, y + h // 4 + 30), min(w // 8, h // 8),                color)        #嘴巴        cv2.rectangle(img, (x + 3 * w // 8, y + 3 * h // 4),                    (x + 5 * w // 8, y + 7 * h // 8), color)cv2.imshow(&quot;image&quot;, img)  # 显示图像c = cv2.waitKey(10)cv2.waitKey(0)cv2.destroyAllWindows()</code></pre><h3 id="参考：https-github-com-vipstone-faceai"><a href="#参考：https-github-com-vipstone-faceai" class="headerlink" title="参考：https://github.com/vipstone/faceai"></a>参考：<a href="https://github.com/vipstone/faceai">https://github.com/vipstone/faceai</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 机器视觉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>见贤思齐焉，见不贤而内自省也</title>
      <link href="/2022/04/21/%E6%9D%90%E6%96%99%E8%B7%A8%E4%BF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AA%E7%9F%A5%E4%B9%8Ezzzzzzz%EF%BC%89/"/>
      <url>/2022/04/21/%E6%9D%90%E6%96%99%E8%B7%A8%E4%BF%9D%E8%AE%A1%E7%AE%97%E6%9C%BA%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AA%E7%9F%A5%E4%B9%8Ezzzzzzz%EF%BC%89/</url>
      
        <content type="html"><![CDATA[【2021保研】材料跨保计算机 - zzzzzzz的文章 - 知乎<br><a href="https://zhuanlan.zhihu.com/p/392805304">https://zhuanlan.zhihu.com/p/392805304</a>—— 敢于跳出自己的舒适圈<br> 大三上学期确定跨专业-大二下学期决定跨专业<br> 《数据结构》，《计算机组成原理》，《操作系统》，《计算机网络》<br>  Leetcode刷题（Easy+Medium），学习python，c语言，Java<br>  确定二战考研地方，住宿情况，做好充分的准备，孤注一掷<br>  ——————————————————————————————————————分割线<br>1.了解跨专业经验，整合信息（4.21-4.23）<br>2.学习c语言，Java，python入门（4.21-7.1）<br>3.学习408（7.1-8.1）<br>4.开始项目（8.1-9.1）<br>5.根据方向确定所需课程（9.1-10.1）<br>6.准备相关比赛，联系老师。oj编程练习<br>7.数理专业受欢迎，量子力学等加分项。]]></content>
      
      
      
        <tags>
            
            <tag> 材料跨计算机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大厂面试技巧</title>
      <link href="/2022/04/16/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/04/16/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[先说下楼主经历：其实我之前已经写过一篇关于自己秋招经历的文章了，里面有很多面试题，可以作为参考：今年行情这么差，到底如何进大厂？下面重新介绍一下自己：我个人是双非本，去年五月份至今一直在 JD 实习，拿到了 JD 的 offer 后，偶然的机会（boss 上）就开始面试部门是百度云 cdn 具体好像是做音视频相关的，主要语言是 Java 和我本人相符一、二、三面两天面完，具体的问题记不清楚了，以下内容仅凭回忆（上班摸鱼写的）：正文<br>一面面经：2021&#x2F;1&#x2F;21 下午五点是个小姐姐，但是很严肃自我介绍<br>介绍实习项目、难点、参与的工作<br>项目用到的设计模式以及其他设计模式<br>syn 锁（升级过程、降级？（读写锁）一些底层原理）<br>操作系统线程间同步机制<br>syn 和 lock 区别<br>线程池、参数详解？你怎么设置参数（I&#x2F;O 密集型、计算密集型）<br>JVM 内存区域<br>如何排查一下线上 OOM 问题？<br>类加载机制？<br>双亲委派？tomcat 如何打破的？<br>写代码 1 翻转链表（秒）2 手写快排序 介绍各个排序算法时间复杂度<br>在看的书籍？知识？《深入理解 Java 虚拟机》说下最深刻的部分？我说了个 R 大写的 JVM 是如何区分出是引用类型还是基本类型<br>反问 大约 47 min<br>二面：2020&#x2F;1&#x2F;22 上午十一点HR 说的是一个高 T 二面面试我，果不其然，一个秃头大叔。自我介绍<br>介绍京东实习项目<br>项目分布式锁怎么用的？主从的缓存 master 节点 down 了怎么办？（Redlock）<br>脑裂问题（配置文件）、数据倾斜（一致性哈希，虚拟节点）、数据分片<br>缓存穿透、击穿、雪崩<br>Redis 哨兵？cluster？<br>zset 底层，为什么用压缩列表（避免内存碎片），跳表查询复杂度？log（n）（逮住 Redis 真就往死里问啊）<br>看你博客里有微服务，讲讲微服务、分布式？<br>项目中各个服务之间怎么调用的？我说用 JSF（JSF 是京东内部的RPC通信工具，类似于 dubbo）<br>分布式 CAP 定理<br>讲讲分布式事务解决方案，各自优缺点（内心。。。还好前几天看过）<br>写题 忘记具体是啥了 反正都是属于 easy 的题目，大约 50+min<br>还有一些回忆不起来了，好像是 Spring 源码的东西，电脑面试没有录音，总之抠得很细，面试官果然是个大佬。。。三面 2020&#x2F;1&#x2F;22 晚上八点半介绍自己<br>两个栈实现一个队列<br>基本上就是一些非技术问题，唠家常、谈理想、问 offer<br>可能是我比较能 bb 三面约 1 h 15min<br>十分钟 HR 联系微信联系说过了，让我等接下来的补笔试、测评邮件1&#x2F;26下午收到邮件做完后 HR 叫我安心等待，最迟周五给发 offer。lz 从去年二月份开始春招找实习，（双非本科学历）到现在差不多过去了一年。大大小小的面试也经历过了不少，也相应的拿了一些公司的 offer，下面是我的一些个人见解加上别的大佬的一些参考，希望能抛砖引玉，如有瑕疵，还请多多指教！我认为的面试 &#x3D; 基础 + 能力 + 规划以及一些面试技巧其实也就是对应着一个人的：过去（学过的知识）、现在（拥有的能力）、未来（规划）基础<br>这个就很简单了比如最基本的数据结构、算法；<br>以Java 为例的一些基础知识：JVM、集合、框架；<br>计算机操作系统、计算机网络；<br>通用的一些中间件：netty、nginx、redis、MySQL 等。<br>这些是基本上都要知道的，尤其是一些面试常问的必须要数量掌握，尽管有人认为这是背书，但是连背书都不背的说明态度有问题，肯定是不是被公司接受的。当然以上说的太笼统了，具体的复习路线可以参考其他大佬的作品，如不嫌弃可以看一下我写过的一些博客 <a href="https://blog.csdn.net/weixin_44104367">https://blog.csdn.net/weixin_44104367</a> 本文只做一些面试经验相关的总结、概述。能力<br>这方面主要是围绕实习、项目来展开的基本上 &#x3D; 技术硬实力 + 能力软实力。比如：有实习的在实习期间做了哪些事能够证明自己的能力<br>如何在开发过程中优雅的书写代码？（其实一些知识譬如设计模式大家都会背，但是能够真正将这个知识落到实地的又有几个呢？<br>项目开发过程中如何一步步提升自己的技术能力、业务水平？<br>如何快速的理解业务？适应环境？<br>对于实习OR项目的思考总结？<br>要明白一点：工作了的人很喜欢问一些 case，尤其是一些领导特别喜欢问，哪怕这个项目技术再牛，那么它是如何落地的呢？他的场景是什么？为了解决什么问题？使用了什么方法 OR 工具？达到的效果如何？最终能满足预期吗？比如大家都会背一些 Spring 源码，设计模式，但是能自己将这二者结合起来吗？比如结合 Spring 源码+设计模式开发？（这篇文章就是个例子 淘系技术部的 <a href="https://mp.weixin.qq.com/s/94oe5c_7ouE1GbyiPfNg5g%EF%BC%89">https://mp.weixin.qq.com/s/94oe5c_7ouE1GbyiPfNg5g）</a>对面试官而言，他们已经听吐了这些背的东西，如果自己能讲的让面试官眼前一亮，那么即时面试问题回答的不太好 最起码也能证明自己对于技术是有追求、有思考的，而不是一个背题机器。对于一个技术而言，它在这个公司存在的意义就是为了一些变现业务服务 技术服务于业务，用业务创造价值。个人认为学生状态过渡到工作状态就是理论转化为实践动力的过程 有些人总觉得校招生身上有一股书生气 大概就是：理论的东西多而幼稚，有些不切实际的想法，能不能落地呢？规划<br>这点其实发现面试总结里面很少有人去谈，但是看到脉脉上，十个 HR，九个都会喜欢听到候选人这方面的一些思考、总结。路线规划<br>举个例子比如：会不会提前去规划自己的人生路线？这是从网上找的一张图，可以看到有很多路线，究竟哪一条适合自己？可能很多人压根没思考过这个问题？另外自己适合哪一行呢？教育？广告？地图？还是纯技术？隔行如隔山，因为我从去年五月份就来实习，也换过俩部门，所以对于这些事情比其他人要深刻一些。只有清楚知道自己喜欢的才有动力去做好他 不喜欢的只是为了生活被动的产出。不是所有人都适合做纯技术、也有的人压根就不适合搞业务，究竟那条大路通向自己心中的罗马，只有自己清楚而这些事很多人都这么回复的：先有了工作再说。看过很多人 尤其是 90 后工作半年跳槽、一年的也有。反正给我的感觉就是：不踏实。对于公司而言就是不忠诚：谁能保证你从上一家公司跳又能干多长时间又跳走了呢？公司培养一个人的代价又有谁去承担呢？在一个公司呆够超过五年 最起码可以说明这个人在这个行业、公司站住脚了。有的人入职以后才发现自己不太适合这个行业、这个方向，于是就跳槽，简历就花了。简历一花，找工作就更不好找。别的公司不知道，JD 这边有的部门五二原则卡的很严格（五年内只在两家公司工作过，也就是说平均一家公司至少工作两年时间 <a href="https://www.jianshu.com/p/ac8f28f58e11%EF%BC%89">https://www.jianshu.com/p/ac8f28f58e11）</a>这还是次要，更重要的是自己能确保这个新的方向就自己适合或者喜欢吗？于是又开始跳、跳、跳。人生往往是一步错、步步错。别人已经在自己合适的方向上工作很久了 而你还在思考自己要做什么。男怕入错行，女怕嫁错郎，说的大概就是这个意思。时间规划<br>大家都知道程序猿 35 是一道坎，到时候要么转管理，要么成为 CTO，自己对于自己的成长路线是一个什么规划呢？管理路线：三年能够处理日常开发当中的任何问题；五年能够在技术上达到自己一个比较理想的状态；七年能够成为小组 leader；十年能够成为部门 leader技术路线：三年够在技术上能够有较大提升；五年成为架构师；七年成为资深架构；十年成为总监等。能够表达出这些，最起码能够说明自己比较踏实，是一个有规划、有思想的人。面试经验<br>对于面试经验这块真的就只能实战找感觉了，每个人都有自己的一个表达方式，不过套路都是差不太多：扬长避短<br>像楼主本人学校不好但是一直在 JD 实习，那么自我介绍的时候可以说自己实习时间比较长等。学校比较好但是导师不放实习的可以着重说下自己的学校经历，paper、竞赛情况，都没有的可以说能够凸显自己能力的地方适当的往自己会的方向引导面试官<br>有的面试官会自己电脑前放一个题库，但是大部分不会，会根据简历上，自己脑海中搜索问题。比如问你 MySQL 调优，自己知道那些就说哪些，比如你知道索引这块哪些自己知道原理就说那些：（is null 判断可能会导致放弃索引、尽量避免使用判断等）再往下往往会问原理，因为你知道最左前缀原则、MySQL 优化器的索引代价分析、选择过程，你就可以轻松回答上来。但是你不太懂索引相关的原理就不要胡言乱语，瞎往自己不擅长的领域引导面试官，可以从设计规范方面谈起（使用 varchar 而不是 char 等等）因为面试官一般会问：为什么？自己在学习知识的过程中也要经常问自己一句：为什么？比如都知道函数表达式操作会导致索引失效，那么原理呢？面试充满了不确定性<br>你又不是RMB 不会所有人都喜欢你。这个恐怕很多人是深有体会：我面试面的挺好的啊，问题都回答上来了，怎么还是挂了？放宽心态，该佛系的时候佛系一点啦。面试充满了不确定性，能和面试官聊得来，即便问题回答的不怎么样，面试官也会放你一马。有的人跟面试官聊不来，甚至面试过程中发生了争执，那肯定就是不给过了呗。面试是一个双向选择的过程<br>你被面试官面试的时候其实你也在考量这个部门、这个面试官技术水平、人品以及是否愿意引导新人等。一般面试自己的都会和自己入职后的工作关系是在一起的，一般是自己的同事、直属领导。如果面试官为人和善、愿意引导你解答出问题来，那么入职之后你的成长速度也会更快的。如果面试官技术问题问的很模糊其辞，不够专业，那么面试多了你也会感受出来。你不是非我不要，我也不是非你们部门、公司不选，面试就是一个双向选择的过程。烂大街的项目尽量不要写<br>秒杀系统 、商城系统。原因自己体会 懂得都懂学历差的自信一点<br>牛客上认识了很多盆友，大家的学历大多数都比我这个双非渣本菜鸡学历高得多，这也不是意味着学历差就一定不行，我这不是也上岸了百度、京东了么。衷心劝诫 22 届及以后毕业学历较差的盆友，学历差不代表一切。但正是因为学历的问题，就需要我们比别人付出更多，别人不会的可以通过学校、paper 补过来，但是我们一无所有只能冲。确实像 bat 这大厂对于学历的要求不是特别高（某东除外，很多部门明确要求学历 211 及以上）PS<br>都在问啥项目比较好，我从个人角度谈一下：有实习的话肯定是公司的项目比较好 无论是体量还是专业程度没实习的话可以做个：仿制 dubbo、netty、tomcat、简单的 ioc 容器啦 或者一些实实在在能落地的项目，因为一个项目落没落地面试官一问就知道。前者会更好的走完一个底层的流程，从原理搞懂这些中间件，会比直接背书强。真正走完一个流程的项目远远优于那些网上的项目 没有实际的背景 那些开发中的情况面试官一问就破（以上为个人观点）以上内容纯手打，囿于楼主本人的认知阶层，目前暂时总结了这么些，算是回馈一下牛客吧 希望22届及以后的同学们看到这篇帖子能够有所启发，写的不好多多包涵！<br>————————————————<br>版权声明：本文为CSDN博主「程序员cxuan」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_36894974/article/details/113766020">https://blog.csdn.net/qq_36894974/article/details/113766020</a>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>color identify</title>
      <link href="/2022/04/12/color-identify/"/>
      <url>/2022/04/12/color-identify/</url>
      
        <content type="html"><![CDATA[import cv2<h1 id="import-matplotlib-pyplot-as-plt"><a href="#import-matplotlib-pyplot-as-plt" class="headerlink" title="import matplotlib.pyplot as plt"></a>import matplotlib.pyplot as plt</h1>import numpy as np<h1 id="定义一个展示图片的函数"><a href="#定义一个展示图片的函数" class="headerlink" title="定义一个展示图片的函数"></a>定义一个展示图片的函数</h1>def cv_show(name, img):<br>    cv2.imshow(name, img)<br>    cv2.waitKey(0)<br>    cv2.destroyAllWindows()<h1 id="定义一个形态学处理的函数"><a href="#定义一个形态学处理的函数" class="headerlink" title="定义一个形态学处理的函数"></a>定义一个形态学处理的函数</h1>def good_thresh_img(img):<br>    gs_frame &#x3D; cv2.GaussianBlur(img, (5, 5), 0)  # 高斯滤波<br>    hsv &#x3D; cv2.cvtColor(gs_frame, cv2.COLOR_BGR2HSV)  # 转化成HSV图像<br>    erode_hsv &#x3D; cv2.erode(hsv, None, iterations&#x3D;2)<br>    return erode_hsv<h1 id="定义一个识别目标颜色并处理的函数"><a href="#定义一个识别目标颜色并处理的函数" class="headerlink" title="定义一个识别目标颜色并处理的函数"></a>定义一个识别目标颜色并处理的函数</h1>def select_color_img(target_color, img):<br>    for i in target_color:<br>        mask &#x3D; cv2.inRange(erode_hsv, color_dist[i][‘Lower’], color_dist[i][‘Upper’])<br>        if (i &#x3D;&#x3D; target_color[0]):<br>            inRange_hsv &#x3D; cv2.bitwise_and(erode_hsv, erode_hsv, mask&#x3D;mask)<br>            cv_show(‘res’, inRange_hsv)  # 不必要，用于调试<br>        else:<br>            inRange_hsv1 &#x3D; cv2.bitwise_and(erode_hsv, erode_hsv, mask&#x3D;mask)<br>            cv_show(‘res1’, inRange_hsv1)  # 不必要，用于调试<br>            inRange_hsv &#x3D; cv2.add(inRange_hsv, inRange_hsv1)<br>            cv_show(‘res2’, inRange_hsv)  # 不必要，用于调试<br>    return inRange_hsv<h1 id="定义一个提取轮廓的函数"><a href="#定义一个提取轮廓的函数" class="headerlink" title="定义一个提取轮廓的函数"></a>定义一个提取轮廓的函数</h1>def extract_contour(img):<br>    inRange_gray &#x3D; cv2.cvtColor(final_inRange_hsv, cv2.COLOR_BGR2GRAY)<br>    contours, hierarchy &#x3D; cv2.findContours(inRange_gray, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)<br>    return contours<h1 id="定义一个寻找目标并绘制外接矩形的函数"><a href="#定义一个寻找目标并绘制外接矩形的函数" class="headerlink" title="定义一个寻找目标并绘制外接矩形的函数"></a>定义一个寻找目标并绘制外接矩形的函数</h1>def find_target(contours, draw_img):<br>    for c in contours:<pre><code>    if cv2.contourArea(c) &lt; 2000:  # 过滤掉较面积小的物体        continue    else:        target_list.append(c)  # 将面积较大的物体视为目标并存入目标列表for i in target_list:  # 绘制目标外接矩形    rect = cv2.minAreaRect(i)    box = cv2.boxPoints(rect)    cv2.drawContours(draw_img, [np.int0(box)], -1, (0, 255, 255), 2)return draw_img</code></pre><h1 id="定义一个绘制中心点坐标的函数"><a href="#定义一个绘制中心点坐标的函数" class="headerlink" title="定义一个绘制中心点坐标的函数"></a>定义一个绘制中心点坐标的函数</h1>def draw_center(target_list, draw_img):<br>    for c in target_list:<br>        M &#x3D; cv2.moments(c)  # 计算中心点的x、y坐标<br>        center_x &#x3D; int(M[‘m10’] &#x2F; M[‘m00’])<br>        center_y &#x3D; int(M[‘m01’] &#x2F; M[‘m00’])<br>        print(‘center_x:’, center_x)  # 打印（返回）中心点的x、y坐标<br>        print(‘center_y:’, center_y)<pre><code>    cv2.circle(draw_img, (center_x, center_y), 7, 128, -1)  # 绘制中心点    str1 = &#39;(&#39; + str(center_x) + &#39;,&#39; + str(center_y) + &#39;)&#39;  # 把坐标转化为字符串    cv2.putText(draw_img, str1, (center_x - 50, center_y + 40), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2,                cv2.LINE_AA)  # 绘制坐标点位return draw_img</code></pre>###主函数部分<h1 id="创建颜色字典"><a href="#创建颜色字典" class="headerlink" title="创建颜色字典"></a>创建颜色字典</h1>#PS中的HSV范围，H是0-360，S是0-1，V（B）是0-1<br>#Opencv中的HSV范围，H是0-180，S是0-255，V是0-255<br>#因此需要转换一下，把PS中H的值除以2，S乘255，V乘255，可以得到对应的opencv的HSV值。<br>color_dist &#x3D; {‘red’: {‘Lower’: np.array([0, 60, 60]), ‘Upper’: np.array([6, 255, 255])},<br>              ‘yellow’: {‘Lower’: np.array([15, 160, 50]), ‘Upper’: np.array([35, 255, 255])},<br>              ‘green’: {‘Lower’: np.array([50, 50, 50]), ‘Upper’: np.array([130, 255, 255])},<br>               ‘white’: {‘Lower’: np.array([0, 0, 221]), ‘Upper’: np.array([0, 30, 255])},<br>‘orange’: {‘Lower’: np.array([11, 43, 46]), ‘Upper’: np.array([25, 255, 255])},<br>‘blue’: {‘Lower’: np.array([100, 43, 46]), ‘Upper’: np.array([124, 255, 255])},<br>              }<h1 id="目标颜色"><a href="#目标颜色" class="headerlink" title="目标颜色"></a>目标颜色</h1>target_color &#x3D; [‘green’]<h1 id="创建目标列表"><a href="#创建目标列表" class="headerlink" title="创建目标列表"></a>创建目标列表</h1>target_list &#x3D; []img &#x3D; cv2.imread(r’C:\Users\86177\Desktop\PCB\PCB1.jpg’, cv2.COLOR_BGR2RGB)  # 读入图像（直接读入灰度图）<br>draw_img &#x3D; img.copy()  # 为保护原图像不被更改而copy了一份，下面对图像的修改都是对这个副本进行的<br>erode_hsv &#x3D; good_thresh_img(img)<br>final_inRange_hsv &#x3D; select_color_img(target_color, erode_hsv)<br>contours &#x3D; extract_contour(final_inRange_hsv)<br>draw_img &#x3D; find_target(contours, draw_img)<br>final_img &#x3D; draw_center(target_list, draw_img)cv_show(‘final_img’, final_img)]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/24/hello-world/"/>
      <url>/2022/02/24/hello-world/</url>
      
        <content type="html"><![CDATA[Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>More info: <a href="https://hexo.io/docs/writing.html">Writing</a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>More info: <a href="https://hexo.io/docs/server.html">Server</a><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>More info: <a href="https://hexo.io/docs/generating.html">Generating</a><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
